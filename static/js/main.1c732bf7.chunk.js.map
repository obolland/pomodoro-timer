{"version":3,"sources":["components/TimeLeft.jsx","components/Break.jsx","components/Session.jsx","App.js","reportWebVitals.js","index.js"],"names":["TimeLeft","props","secsLeft","minsLeft","currentSeshType","isStarted","handleStartStopClick","className","onClick","Break","decBreakLengthOneMin","incBreakLengthOneMin","breakMinutes","breakSeconds","Session","decSeshLengthOneMin","incSeshLengthOneMin","seshMinutes","seshSeconds","App","useState","seshLength","setSeshLength","Math","floor","breakLength","setBreakLength","setCurrentSeshType","intervalId","setIntervalId","timeLeft","setTimeLeft","useEffect","audioElement","Audio","play","percentageSesh","percentageBreak","newDecSeshLength","newIncSeshLength","value","clearInterval","newIntervalId","setInterval","prevTimeLeft","newDecBreakLength","newIncBreakLength","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c732bf7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nfunction TimeLeft(props) {\n  const {\n    secsLeft,\n    minsLeft,\n    currentSeshType,\n    isStarted,\n    handleStartStopClick\n  } = props;\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <p>{currentSeshType}</p>\n      <p className=\"text-5xl\">\n        {minsLeft}:{secsLeft < 10 ? `0${secsLeft}` : secsLeft}\n      </p>\n      <button\n        onClick={handleStartStopClick}\n        className=\"button bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n      >\n        {isStarted ? \"Stop\" : \"Start\"}\n      </button>\n    </div>\n  );\n}\n\nexport default TimeLeft;\n","import React from \"react\";\n\nfunction Break(props) {\n  const {\n    decBreakLengthOneMin,\n    incBreakLengthOneMin,\n    breakMinutes,\n    breakSeconds\n  } = props;\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <p className=\"text-2xl\">Break</p>\n      <p className=\"text-2xl\">\n        {breakMinutes}:{breakSeconds < 10 ? `0${breakSeconds}` : breakSeconds}\n      </p>\n      <div>\n        <button\n          onClick={incBreakLengthOneMin}\n          className=\"button bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n        >\n          ↑\n        </button>\n        <button\n          onClick={decBreakLengthOneMin}\n          className=\"button bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n        >\n          ↓\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Break;\n","import React from \"react\";\n\nfunction Session(props) {\n  const {\n    decSeshLengthOneMin,\n    incSeshLengthOneMin,\n    seshMinutes,\n    seshSeconds\n  } = props;\n\n  return (\n    <div className=\"flex flex-col items-center\">\n      <p className=\"text-2xl\">Session</p>\n      <p className=\"text-2xl\">\n        {seshMinutes}:{seshSeconds < 10 ? `0${seshSeconds}` : seshSeconds}\n      </p>\n      <div>\n        <button\n          onClick={incSeshLengthOneMin}\n          className=\"button bg-transparent hover:bg-blue-400 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n        >\n          ↑\n        </button>\n        <button\n          onClick={decSeshLengthOneMin}\n          className=\"button bg-transparent hover:bg-blue-400 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n        >\n          ↓\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Session;","import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport TimeLeft from \"./components/TimeLeft\";\nimport Break from \"./components/Break\";\nimport Session from \"./components/Session\";\nimport { CircularProgressbarWithChildren } from \"react-circular-progressbar\";\nimport \"react-circular-progressbar/dist/styles.css\";\n\nexport default function App() {\n  const [seshLength, setSeshLength] = useState(1500);\n  const seshMinutes = Math.floor(seshLength / 60);\n  const seshSeconds = seshLength - seshMinutes * 60;\n  const [breakLength, setBreakLength] = useState(300);\n  const breakMinutes = Math.floor(breakLength / 60);\n  const breakSeconds = breakLength - breakMinutes * 60;\n  const [currentSeshType, setCurrentSeshType] = useState(\"session\");\n  const [intervalId, setIntervalId] = useState(null);\n  const [timeLeft, setTimeLeft] = useState(seshLength);\n  const minsLeft = Math.floor(timeLeft / 60);\n  const secsLeft = timeLeft - minsLeft * 60;\n\n  const incSeshLengthOneMin = () => {\n    const newIncSeshLength = seshLength + 60;\n    if (newIncSeshLength <= 60 * 60) {\n      setSeshLength(newIncSeshLength);\n    }\n  };\n\n  const decSeshLengthOneMin = () => {\n    const newDecSeshLength = seshLength - 60;\n    if (newDecSeshLength > 0) {\n      setSeshLength(newDecSeshLength);\n    }\n  };\n\n  const incBreakLengthOneMin = () => {\n    const newIncBreakLength = breakLength + 60;\n    if (newIncBreakLength <= 60 * 60) {\n      setBreakLength(newIncBreakLength);\n    }\n  };\n\n  const decBreakLengthOneMin = () => {\n    const newDecBreakLength = breakLength - 60;\n    if (newDecBreakLength > 0) {\n      setBreakLength(newDecBreakLength);\n    }\n  };\n\n  const handleResetClick = () => {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setCurrentSeshType(\"session\");\n    setSeshLength(1500);\n    setBreakLength(60 * 5);\n    setTimeLeft(60 * 25);\n  };\n\n  const isStarted = intervalId != null;\n  const handleStartStopClick = () => {\n    if (isStarted) {\n      clearInterval(intervalId);\n      setIntervalId(null);\n    } else {\n      const newIntervalId = setInterval(() => {\n        setTimeLeft((prevTimeLeft) => prevTimeLeft - 1);\n      }, 1000);\n      setIntervalId(newIntervalId);\n    }\n  };\n\n  //I want to change timeLeft when session length changes.\n  //useEffect takes a callback that is called whenever a variable\n  //I'm listening for changes. In this case, I'm listening for session length.\n  useEffect(() => {\n    setTimeLeft(seshLength); //run this function when variable in dependency list changes\n  }, [seshLength]); //subscribe to variables here\n\n  //listen to timeLeft changes.\n  //when timeLeft (the timer) is 0...\n  useEffect(() => {\n    const audioElement = new Audio(\n      \"https://freesound.org/data/previews/250/250629_4486188-lq.mp3\"\n    );\n    if (timeLeft === 0) {\n      audioElement.play();\n      if (currentSeshType === \"session\") {\n        setCurrentSeshType(\"break\");\n        setTimeLeft(breakLength);\n      } else if (currentSeshType === \"break\") {\n        setCurrentSeshType(\"session\");\n        setTimeLeft(seshLength);\n      }\n    }\n  }, [timeLeft, currentSeshType, breakLength, seshLength]);\n\n  //React-circular-progressbar logic for converting...\n  //sesh and break times to a percentage\n  const percentageSesh = (timeLeft / seshLength) * 100;\n  const percentageBreak = (timeLeft / breakLength) * 100;\n  const percentage = () => {\n    if (currentSeshType === \"session\") {\n      return percentageSesh;\n    } else if (currentSeshType === \"break\") {\n      return percentageBreak;\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen items-center justify-center bg-gray-100\">\n      <div className=\"flex w-full justify-around\">\n        <Session\n          decSeshLengthOneMin={decSeshLengthOneMin}\n          incSeshLengthOneMin={incSeshLengthOneMin}\n          seshMinutes={seshMinutes}\n          seshSeconds={seshSeconds}\n        />\n        <CircularProgressbarWithChildren value={percentage()}>\n          <TimeLeft\n            seshLength={seshLength}\n            breakLength={breakLength}\n            secsLeft={secsLeft}\n            minsLeft={minsLeft}\n            currentSeshType={currentSeshType}\n            isStarted={isStarted}\n            handleStartStopClick={handleStartStopClick}\n          />\n          <button\n            onClick={handleResetClick}\n            className=\"button bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n          >\n            Reset\n          </button>\n        </CircularProgressbarWithChildren>\n        <Break\n          decBreakLengthOneMin={decBreakLengthOneMin}\n          incBreakLengthOneMin={incBreakLengthOneMin}\n          breakMinutes={breakMinutes}\n          breakSeconds={breakSeconds}\n        />\n      </div>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}